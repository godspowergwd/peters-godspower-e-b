const landingPageModel = require('../models/landingPageModel');
const userModel = require('../models/userModel'); // To verify user exists, though protect middleware handles auth

// POST /api/landing-pages
// Create a new landing page
const createPage = async (req, res, next) => {
  try {
    const { name, slug, content_json, is_published } = req.body;
    const user_id = req.user.id; // Authenticated user's ID from protect middleware

    if (!name) {
      return res.status(400).json({ message: 'Landing page name is required.' });
    }

    // Optional: Check if user exists (though `protect` middleware already ensures an authenticated user)
    // const user = await userModel.findUserById(user_id);
    // if (!user) {
    //   return res.status(404).json({ message: 'User not found to associate with this page.' });
    // }

    const pageData = {
      user_id,
      name,
      slug, // Can be auto-generated by model if not provided
      content_json: content_json || { elements: [], styles: {} }, // Default structure
      is_published: is_published || false,
    };

    const newPage = await landingPageModel.createLandingPage(pageData);
    res.status(201).json(newPage);
  } catch (error) {
    console.error('Error creating landing page:', error);
    next(error);
  }
};

// GET /api/landing-pages
// Get all landing pages for the authenticated user
const getUserPages = async (req, res, next) => {
  try {
    const user_id = req.user.id;
    const pages = await landingPageModel.findLandingPagesByUserId(user_id);
    res.status(200).json(pages);
  } catch (error) {
    console.error('Error fetching user landing pages:', error);
    next(error);
  }
};

// GET /api/landing-pages/:id
// Get a specific landing page by ID (owned by the authenticated user)
const getPageById = async (req, res, next) => {
  try {
    const page_id = parseInt(req.params.id, 10);
    const user_id = req.user.id;

    if (isNaN(page_id)) {
        return res.status(400).json({ message: 'Invalid page ID format.' });
    }

    const page = await landingPageModel.findLandingPageById(page_id);

    if (!page) {
      return res.status(404).json({ message: 'Landing page not found.' });
    }

    // Authorization: Check if the authenticated user owns this page
    if (page.user_id !== user_id) {
      return res.status(403).json({ message: 'Forbidden: You do not own this landing page.' });
    }

    res.status(200).json(page);
  } catch (error) {
    console.error('Error fetching landing page by ID:', error);
    next(error);
  }
};

// PUT /api/landing-pages/:id
// Update a landing page (owned by the authenticated user)
const updatePage = async (req, res, next) => {
  try {
    const page_id = parseInt(req.params.id, 10);
    const user_id = req.user.id;
    const updateData = req.body; // { name, slug, content_json, is_published }

    if (isNaN(page_id)) {
        return res.status(400).json({ message: 'Invalid page ID format.' });
    }

    // First, verify the page exists and the user owns it
    const existingPage = await landingPageModel.findLandingPageById(page_id);
    if (!existingPage) {
      return res.status(404).json({ message: 'Landing page not found.' });
    }
    if (existingPage.user_id !== user_id) {
      return res.status(403).json({ message: 'Forbidden: You do not own this landing page.' });
    }

    // Prevent user_id or id from being changed via updateData
    delete updateData.user_id;
    delete updateData.id;
    delete updateData.created_at; // Should not be updatable

    if (Object.keys(updateData).length === 0) {
        return res.status(400).json({ message: 'No update data provided.' });
    }

    const updatedPage = await landingPageModel.updateLandingPage(page_id, updateData);
    if (!updatedPage) { // Should not happen if previous checks passed, but good for safety
      return res.status(404).json({ message: 'Landing page not found or update failed.' });
    }

    res.status(200).json(updatedPage);
  } catch (error) {
    console.error('Error updating landing page:', error);
    next(error);
  }
};

// DELETE /api/landing-pages/:id
// Delete a landing page (owned by the authenticated user)
const deletePage = async (req, res, next) => {
  try {
    const page_id = parseInt(req.params.id, 10);
    const user_id = req.user.id;

    if (isNaN(page_id)) {
        return res.status(400).json({ message: 'Invalid page ID format.' });
    }

    // First, verify the page exists and the user owns it
    const existingPage = await landingPageModel.findLandingPageById(page_id);
    if (!existingPage) {
      return res.status(404).json({ message: 'Landing page not found.' });
    }
    if (existingPage.user_id !== user_id) {
      return res.status(403).json({ message: 'Forbidden: You do not own this landing page.' });
    }

    const success = await landingPageModel.deleteLandingPage(page_id);
    if (!success) { // Should not happen if previous checks passed
      return res.status(404).json({ message: 'Landing page not found or deletion failed.' });
    }

    res.status(204).send(); // No content
  } catch (error) {
    console.error('Error deleting landing page:', error);
    next(error);
  }
};


// GET /api/public/pages/:slug
// Get a published landing page by its slug (for public viewing)
// This route would NOT be protected by `protect` middleware that requires user login.
// It might have its own middleware or be on a different router prefix.
const getPublicPageBySlug = async (req, res, next) => {
    try {
        const { slug } = req.params;
        if (!slug) {
            return res.status(400).json({ message: 'Page slug is required.' });
        }

        const page = await landingPageModel.findLandingPageBySlug(slug);

        if (!page) {
            return res.status(404).json({ message: 'Landing page not found.' });
        }

        if (!page.is_published) {
            // Depending on requirements, you might return 404 or a specific "not published" message.
            // For public access, if it's not published, it's effectively not found for the public.
            return res.status(404).json({ message: 'Landing page not found (not published).' });
        }

        // Potentially strip or transform data for public view if needed
        // e.g., remove user_id or other internal fields from the public response.
        const { user_id, ...publicPageData } = page;

        res.status(200).json(publicPageData);
    } catch (error) {
        console.error('Error fetching public landing page by slug:', error);
        next(error);
    }
};


module.exports = {
  createPage,
  getUserPages,
  getPageById,
  updatePage,
  deletePage,
  getPublicPageBySlug,
};
